/*

Copyright 2017 Google Inc.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.

*/

// Code generated by protoc-gen-go.
// source: pubkeystore.proto
// DO NOT EDIT!

/*
Package api is a generated protocol buffer package.

It is generated from these files:
	pubkeystore.proto

It has these top-level messages:
	SSHKey
	GetKeysRequest
	GetKeysReply
*/
package api

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

type SSHKey struct {
	Name    string `protobuf:"bytes,1,opt,name=name" json:"name,omitempty"`
	Algo    string `protobuf:"bytes,2,opt,name=algo" json:"algo,omitempty"`
	Pubkey  string `protobuf:"bytes,3,opt,name=pubkey" json:"pubkey,omitempty"`
	Comment string `protobuf:"bytes,4,opt,name=comment" json:"comment,omitempty"`
}

func (m *SSHKey) Reset()                    { *m = SSHKey{} }
func (m *SSHKey) String() string            { return proto.CompactTextString(m) }
func (*SSHKey) ProtoMessage()               {}
func (*SSHKey) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{0} }

func (m *SSHKey) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *SSHKey) GetAlgo() string {
	if m != nil {
		return m.Algo
	}
	return ""
}

func (m *SSHKey) GetPubkey() string {
	if m != nil {
		return m.Pubkey
	}
	return ""
}

func (m *SSHKey) GetComment() string {
	if m != nil {
		return m.Comment
	}
	return ""
}

type GetKeysRequest struct {
	VmName string `protobuf:"bytes,1,opt,name=vm_name,json=vmName" json:"vm_name,omitempty"`
}

func (m *GetKeysRequest) Reset()                    { *m = GetKeysRequest{} }
func (m *GetKeysRequest) String() string            { return proto.CompactTextString(m) }
func (*GetKeysRequest) ProtoMessage()               {}
func (*GetKeysRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{1} }

func (m *GetKeysRequest) GetVmName() string {
	if m != nil {
		return m.VmName
	}
	return ""
}

type GetKeysReply struct {
	Keys []*SSHKey `protobuf:"bytes,1,rep,name=keys" json:"keys,omitempty"`
}

func (m *GetKeysReply) Reset()                    { *m = GetKeysReply{} }
func (m *GetKeysReply) String() string            { return proto.CompactTextString(m) }
func (*GetKeysReply) ProtoMessage()               {}
func (*GetKeysReply) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{2} }

func (m *GetKeysReply) GetKeys() []*SSHKey {
	if m != nil {
		return m.Keys
	}
	return nil
}

func init() {
	proto.RegisterType((*SSHKey)(nil), "api.SSHKey")
	proto.RegisterType((*GetKeysRequest)(nil), "api.GetKeysRequest")
	proto.RegisterType((*GetKeysReply)(nil), "api.GetKeysReply")
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// Client API for PubkeyStore service

type PubkeyStoreClient interface {
	GetKeys(ctx context.Context, in *GetKeysRequest, opts ...grpc.CallOption) (*GetKeysReply, error)
}

type pubkeyStoreClient struct {
	cc *grpc.ClientConn
}

func NewPubkeyStoreClient(cc *grpc.ClientConn) PubkeyStoreClient {
	return &pubkeyStoreClient{cc}
}

func (c *pubkeyStoreClient) GetKeys(ctx context.Context, in *GetKeysRequest, opts ...grpc.CallOption) (*GetKeysReply, error) {
	out := new(GetKeysReply)
	err := grpc.Invoke(ctx, "/api.PubkeyStore/GetKeys", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for PubkeyStore service

type PubkeyStoreServer interface {
	GetKeys(context.Context, *GetKeysRequest) (*GetKeysReply, error)
}

func RegisterPubkeyStoreServer(s *grpc.Server, srv PubkeyStoreServer) {
	s.RegisterService(&_PubkeyStore_serviceDesc, srv)
}

func _PubkeyStore_GetKeys_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetKeysRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PubkeyStoreServer).GetKeys(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.PubkeyStore/GetKeys",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PubkeyStoreServer).GetKeys(ctx, req.(*GetKeysRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _PubkeyStore_serviceDesc = grpc.ServiceDesc{
	ServiceName: "api.PubkeyStore",
	HandlerType: (*PubkeyStoreServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetKeys",
			Handler:    _PubkeyStore_GetKeys_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "pubkeystore.proto",
}

func init() { proto.RegisterFile("pubkeystore.proto", fileDescriptor0) }

var fileDescriptor0 = []byte{
	// 218 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x54, 0x90, 0x51, 0x4b, 0x87, 0x30,
	0x14, 0xc5, 0x33, 0x65, 0xd2, 0x35, 0x82, 0xff, 0x0d, 0x6a, 0xf4, 0xd2, 0x9f, 0x3d, 0xfd, 0x7b,
	0x31, 0xd0, 0x6f, 0xd0, 0x4b, 0x81, 0x10, 0xa1, 0x1f, 0x20, 0x66, 0x5c, 0x42, 0x72, 0x6e, 0xe9,
	0x14, 0xf6, 0xed, 0x63, 0xd3, 0x22, 0xdf, 0xee, 0xfd, 0x9d, 0xb3, 0x9d, 0xb3, 0xc1, 0xc1, 0xcc,
	0xed, 0x17, 0xb9, 0xc9, 0xea, 0x91, 0x72, 0x33, 0x6a, 0xab, 0x31, 0x96, 0xa6, 0x13, 0x2d, 0xb0,
	0xa6, 0x79, 0xa9, 0xc8, 0x21, 0x42, 0x32, 0x48, 0x45, 0x3c, 0x3a, 0x46, 0xa7, 0x8b, 0x3a, 0xcc,
	0x9e, 0xc9, 0xfe, 0x53, 0xf3, 0xf3, 0x95, 0xf9, 0x19, 0x6f, 0x80, 0xad, 0x77, 0xf1, 0x38, 0xd0,
	0x6d, 0x43, 0x0e, 0xe9, 0x87, 0x56, 0x8a, 0x06, 0xcb, 0x93, 0x20, 0xfc, 0xae, 0xe2, 0x01, 0xae,
	0x9e, 0xc9, 0x56, 0xe4, 0xa6, 0x9a, 0xbe, 0x67, 0x9a, 0x2c, 0xde, 0x42, 0xba, 0xa8, 0xf7, 0x7f,
	0x71, 0x6c, 0x51, 0xaf, 0x52, 0x91, 0x78, 0x84, 0xcb, 0x3f, 0xab, 0xe9, 0x1d, 0xde, 0x43, 0xe2,
	0x5b, 0xf3, 0xe8, 0x18, 0x9f, 0xb2, 0x22, 0xcb, 0xa5, 0xe9, 0xf2, 0xb5, 0x6f, 0x1d, 0x84, 0xe2,
	0x09, 0xb2, 0xb7, 0x90, 0xdf, 0xf8, 0x97, 0x61, 0x09, 0xe9, 0x76, 0x1e, 0xaf, 0x83, 0x79, 0x1f,
	0x7c, 0x77, 0xd8, 0x43, 0xd3, 0x3b, 0x71, 0xd6, 0xb2, 0xf0, 0x1f, 0xe5, 0x4f, 0x00, 0x00, 0x00,
	0xff, 0xff, 0xc0, 0x19, 0x77, 0xc9, 0x24, 0x01, 0x00, 0x00,
}
